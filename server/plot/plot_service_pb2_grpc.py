# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import plot_service_pb2 as plot__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in plot_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PlotServiceStub(object):
    """The plotting service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializePlot = channel.unary_unary(
                '/plot.PlotService/InitializePlot',
                request_serializer=plot__service__pb2.InitializePlotRequest.SerializeToString,
                response_deserializer=plot__service__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.ProcessCommand = channel.unary_unary(
                '/plot.PlotService/ProcessCommand',
                request_serializer=plot__service__pb2.CommandRequest.SerializeToString,
                response_deserializer=plot__service__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.Disconnect = channel.unary_unary(
                '/plot.PlotService/Disconnect',
                request_serializer=plot__service__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=plot__service__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.HasPower = channel.unary_unary(
                '/plot.PlotService/HasPower',
                request_serializer=plot__service__pb2.HasPowerRequest.SerializeToString,
                response_deserializer=plot__service__pb2.HasPowerResponse.FromString,
                _registered_method=True)
        self.PlotAlignmentSVG = channel.unary_unary(
                '/plot.PlotService/PlotAlignmentSVG',
                request_serializer=plot__service__pb2.PlotAlignmentSVGRequest.SerializeToString,
                response_deserializer=plot__service__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.WalkHome = channel.unary_unary(
                '/plot.PlotService/WalkHome',
                request_serializer=plot__service__pb2.WalkHomeRequest.SerializeToString,
                response_deserializer=plot__service__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.ResetHomePosition = channel.unary_unary(
                '/plot.PlotService/ResetHomePosition',
                request_serializer=plot__service__pb2.ResetHomePositionRequest.SerializeToString,
                response_deserializer=plot__service__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.RestoreInteractiveContext = channel.unary_unary(
                '/plot.PlotService/RestoreInteractiveContext',
                request_serializer=plot__service__pb2.RestoreInteractiveContextRequest.SerializeToString,
                response_deserializer=plot__service__pb2.CommandResponse.FromString,
                _registered_method=True)


class PlotServiceServicer(object):
    """The plotting service definition
    """

    def InitializePlot(self, request, context):
        """Initialize NextDraw with configuration options
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessCommand(self, request, context):
        """Process a command for the NextDraw machine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Disconnect from NextDraw
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasPower(self, request, context):
        """Check if NextDraw has power
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlotAlignmentSVG(self, request, context):
        """Plot the alignment SVG
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WalkHome(self, request, context):
        """Walk the home position in x or y axis
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetHomePosition(self, request, context):
        """Reset the home position
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestoreInteractiveContext(self, request, context):
        """Restore interactive context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PlotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializePlot': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializePlot,
                    request_deserializer=plot__service__pb2.InitializePlotRequest.FromString,
                    response_serializer=plot__service__pb2.CommandResponse.SerializeToString,
            ),
            'ProcessCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessCommand,
                    request_deserializer=plot__service__pb2.CommandRequest.FromString,
                    response_serializer=plot__service__pb2.CommandResponse.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=plot__service__pb2.DisconnectRequest.FromString,
                    response_serializer=plot__service__pb2.CommandResponse.SerializeToString,
            ),
            'HasPower': grpc.unary_unary_rpc_method_handler(
                    servicer.HasPower,
                    request_deserializer=plot__service__pb2.HasPowerRequest.FromString,
                    response_serializer=plot__service__pb2.HasPowerResponse.SerializeToString,
            ),
            'PlotAlignmentSVG': grpc.unary_unary_rpc_method_handler(
                    servicer.PlotAlignmentSVG,
                    request_deserializer=plot__service__pb2.PlotAlignmentSVGRequest.FromString,
                    response_serializer=plot__service__pb2.CommandResponse.SerializeToString,
            ),
            'WalkHome': grpc.unary_unary_rpc_method_handler(
                    servicer.WalkHome,
                    request_deserializer=plot__service__pb2.WalkHomeRequest.FromString,
                    response_serializer=plot__service__pb2.CommandResponse.SerializeToString,
            ),
            'ResetHomePosition': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetHomePosition,
                    request_deserializer=plot__service__pb2.ResetHomePositionRequest.FromString,
                    response_serializer=plot__service__pb2.CommandResponse.SerializeToString,
            ),
            'RestoreInteractiveContext': grpc.unary_unary_rpc_method_handler(
                    servicer.RestoreInteractiveContext,
                    request_deserializer=plot__service__pb2.RestoreInteractiveContextRequest.FromString,
                    response_serializer=plot__service__pb2.CommandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plot.PlotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('plot.PlotService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PlotService(object):
    """The plotting service definition
    """

    @staticmethod
    def InitializePlot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plot.PlotService/InitializePlot',
            plot__service__pb2.InitializePlotRequest.SerializeToString,
            plot__service__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plot.PlotService/ProcessCommand',
            plot__service__pb2.CommandRequest.SerializeToString,
            plot__service__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plot.PlotService/Disconnect',
            plot__service__pb2.DisconnectRequest.SerializeToString,
            plot__service__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HasPower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plot.PlotService/HasPower',
            plot__service__pb2.HasPowerRequest.SerializeToString,
            plot__service__pb2.HasPowerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlotAlignmentSVG(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plot.PlotService/PlotAlignmentSVG',
            plot__service__pb2.PlotAlignmentSVGRequest.SerializeToString,
            plot__service__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WalkHome(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plot.PlotService/WalkHome',
            plot__service__pb2.WalkHomeRequest.SerializeToString,
            plot__service__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetHomePosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plot.PlotService/ResetHomePosition',
            plot__service__pb2.ResetHomePositionRequest.SerializeToString,
            plot__service__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RestoreInteractiveContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plot.PlotService/RestoreInteractiveContext',
            plot__service__pb2.RestoreInteractiveContextRequest.SerializeToString,
            plot__service__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
